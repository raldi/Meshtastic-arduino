/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.6-dev */

#ifndef MT_NANOPB_H
#define MT_NANOPB_H
#include "pb.h"

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

typedef struct _User {
    pb_callback_t id; // A full name for this user, i.e. "Kevin Hester"
    pb_callback_t long_name; // A full name for this user, i.e. "Kevin Hester"
    pb_callback_t short_name; // A VERY short name, ideally two characters.
    pb_callback_t macaddr;
} User;

typedef struct _MyNodeInfo {
    uint32_t my_node_num;
} MyNodeInfo;

typedef struct _Position {
    int32_t latitude_i; // divide by 1e-7 to get degrees
    int32_t longitude_i;
    int32_t altitude; // In meters above MSL (but see issue #359)
    int32_t battery_level; // 1-100 (0 means not provided)
    uint32_t time;  // The last time we received a position
    uint32_t pos_timestamp;  // The timestamp on that position
    uint32_t ground_speed;  // meters/sec
} Position;

typedef struct _ToRadio {
    pb_size_t which_payloadVariant;
    union {
        uint32_t want_config_id;
        bool disconnect;
    } payloadVariant;
} ToRadio;

// Full information about a node on the mesh
typedef struct _NodeInfo {
    uint32_t num;
    bool has_user;
    User user;
    bool has_position;
    Position position;
    uint32_t last_heard;
} NodeInfo;

typedef struct _FromRadio {
    pb_size_t which_payloadVariant;
    union {
        MyNodeInfo my_info;
        NodeInfo node_info;
        uint32_t config_complete_id;
    } payloadVariant;
} FromRadio;


#ifdef __cplusplus
extern "C" {
#endif

/* Initializer values for message structs */
#define User_init_default                        {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define Position_init_default                    {0, 0, 0, 0, 0, 0, 0, 0}
#define NodeInfo_init_default                    {0, false, User_init_default, false, Position_init_default, 0}
#define MyNodeInfo_init_default                  {0}
#define FromRadio_init_default                   {0, {MyNodeInfo_init_default}}
#define ToRadio_init_default                     {0, {0}}
#define User_init_zero                           {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define Position_init_zero                       {0, 0, 0, 0, 0, 0, 0, 0}
#define NodeInfo_init_zero                       {0, false, User_init_zero, false, Position_init_zero, 0}
#define MyNodeInfo_init_zero                     {0}
#define FromRadio_init_zero                      {0, {MyNodeInfo_init_zero}}
#define ToRadio_init_zero                        {0, {0}}

/* Field tags (for use in manual encoding/decoding) */
#define User_id_tag                              1
#define User_long_name_tag                       2
#define User_short_name_tag                      3
#define User_macaddr_tag                         4
#define MyNodeInfo_my_node_num_tag               1
#define Position_latitude_i_tag                  1
#define Position_longitude_i_tag                 2
#define Position_altitude_tag                    3
#define Position_battery_level_tag               4
#define Position_time_tag                        9
#define Position_pos_timestamp_tag               12
#define Position_ground_speed_tag                20
#define ToRadio_want_config_id_tag               100
#define ToRadio_disconnect_tag                   104
#define NodeInfo_num_tag                         1
#define NodeInfo_user_tag                        2
#define NodeInfo_position_tag                    3
#define NodeInfo_last_heard_tag                  4
#define FromRadio_my_info_tag                    3
#define FromRadio_node_info_tag                  4
#define FromRadio_config_complete_id_tag         8
#define FromRadio_packet_tag                     11


/* Struct field encoding specification for nanopb */
#define User_FIELDLIST(X, a) \
X(a, CALLBACK, SINGULAR, STRING,   id,                1) \
X(a, CALLBACK, SINGULAR, STRING,   long_name,         2) \
X(a, CALLBACK, SINGULAR, STRING,   short_name,        3) \
X(a, CALLBACK, SINGULAR, BYTES,    macaddr,           4)
#define User_CALLBACK pb_default_field_callback
#define User_DEFAULT NULL

#define Position_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, SFIXED32, latitude_i,        1) \
X(a, STATIC,   SINGULAR, SFIXED32, longitude_i,       2) \
X(a, STATIC,   SINGULAR, INT32,    altitude,          3) \
X(a, STATIC,   SINGULAR, INT32,    battery_level,     4) \
X(a, STATIC,   SINGULAR, FIXED32,  time,              9) \
X(a, STATIC,   SINGULAR, FIXED32,  pos_timestamp,    12) \
X(a, STATIC,   SINGULAR, UINT32,   ground_speed,     20)
#define Position_CALLBACK NULL
#define Position_DEFAULT NULL

#define NodeInfo_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   num,               1) \
X(a, STATIC,   OPTIONAL, MESSAGE,  user,              2) \
X(a, STATIC,   OPTIONAL, MESSAGE,  position,          3) \
X(a, STATIC,   SINGULAR, FIXED32,  last_heard,        4)
#define NodeInfo_CALLBACK NULL
#define NodeInfo_DEFAULT NULL
#define NodeInfo_user_MSGTYPE User
#define NodeInfo_position_MSGTYPE Position

#define MyNodeInfo_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   my_node_num,       1)
#define MyNodeInfo_CALLBACK NULL
#define MyNodeInfo_DEFAULT NULL

#define FromRadio_FIELDLIST(X, a) \
X(a, STATIC,   ONEOF,    MESSAGE,  (payloadVariant,my_info,payloadVariant.my_info),   3) \
X(a, STATIC,   ONEOF,    MESSAGE,  (payloadVariant,node_info,payloadVariant.node_info),   4) \
X(a, STATIC,   ONEOF,    UINT32,   (payloadVariant,config_complete_id,payloadVariant.config_complete_id),   8)
#define FromRadio_CALLBACK NULL
#define FromRadio_DEFAULT NULL
#define FromRadio_payloadVariant_my_info_MSGTYPE MyNodeInfo
#define FromRadio_payloadVariant_node_info_MSGTYPE NodeInfo

#define ToRadio_FIELDLIST(X, a) \
X(a, STATIC,   ONEOF,    UINT32,   (payloadVariant,want_config_id,payloadVariant.want_config_id), 100) \
X(a, STATIC,   ONEOF,    BOOL,     (payloadVariant,disconnect,payloadVariant.disconnect), 104)
#define ToRadio_CALLBACK NULL
#define ToRadio_DEFAULT NULL

extern const pb_msgdesc_t User_msg;
extern const pb_msgdesc_t Position_msg;
extern const pb_msgdesc_t NodeInfo_msg;
extern const pb_msgdesc_t MyNodeInfo_msg;
extern const pb_msgdesc_t FromRadio_msg;
extern const pb_msgdesc_t ToRadio_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define User_fields &User_msg
#define Position_fields &Position_msg
#define NodeInfo_fields &NodeInfo_msg
#define MyNodeInfo_fields &MyNodeInfo_msg
#define FromRadio_fields &FromRadio_msg
#define ToRadio_fields &ToRadio_msg

/* Maximum encoded size of messages (where known) */
/* User_size depends on runtime parameters */
/* NodeInfo_size depends on runtime parameters */
/* FromRadio_size depends on runtime parameters */
#define MyNodeInfo_size                          6
#define Position_size                            56
#define ToRadio_size                             7

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
